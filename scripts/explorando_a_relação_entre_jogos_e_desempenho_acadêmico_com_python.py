# -*- coding: utf-8 -*-
"""Explorando a Relação entre Jogos e Desempenho Acadêmico com Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PIogJSHZOEs8I-HOLyY3nlUa5-GhN4Fp
"""

import pandas as pd

df = pd.read_csv('/content/gameandgrade.csv')

df.head()

print(df.isnull().sum())

print(df.describe())

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(df["Playing Hours"], bins=6, kde=True)
plt.title("Distribuição do Tempo de Jogo")
plt.xlabel("Horas jogadas por dia")
plt.ylabel("Números de alunos")
plt.show()

sns.boxplot(df["Grade"])
plt.title("Distribuição das Notas dos Alunos")
plt.show()

sns.countplot(df["Parent Revenue"])
plt.title("Distribuição de Renda Familiar")
plt.show()

plt.figure(figsize=(35, 22))
sns.scatterplot(data=df, x="Playing Hours", y="Grade", hue="Sex")
plt.title("Tempo de Jogo x Notas dos Alunos")
plt.xlabel("Horas jogadas por dia")
plt.ylabel("Notas dos Alunos")
plt.show()

df["Grade Group"] = pd.cut(df["Grade"], bins=[0, 20, 40, 60, 80, 100], labels=["0-20", "21-40", "41-60", "61-80", "81-100"])
print(df[["Grade", "Grade Group"]].head())

df['Grade'] = pd.to_numeric(df['Grade'], errors='coerce')

df["Grade Group"] = pd.cut(df["Grade"], bins=[0, 20, 40, 60, 80, 100], labels=["0-20", "21-40", "41-60", "61-80", "81-100"])
print(df[["Grade", "Grade Group"]].head())

plt.figure(figsize=(12, 6))
sns.scatterplot(data=df, x="Playing Hours", y="Grade Group", hue="Sex", alpha=0.7)
plt.title("Tempo de Jogo x Notas dos Alunos (Agrupadas)")
plt.xlabel("Horas jogadas por dia")
plt.ylabel("Faixa de Notas")
plt.show()

correlacao = df["Playing Hours"].corr(df["Grade"])
print(f"Correlação entre horas de jogo e notas: {correlacao}")

plt.figure(figsize=(8,5))
sns.boxplot(data=df, x="Parent Revenue", y="Grade")
plt.title("Renda dos Pais x Notas Acadêmicas")
plt.xlabel("Renda Familiar")
plt.ylabel("Nota Acadêmica")
plt.show()

sns.barplot(data=df, x="Father Education", y="Grade", errorbar=None)
plt.title("Educação do Pai x Nota Acadêmica")
plt.show()

sns.barplot(data=df, x="Mother Education", y="Grade", errorbar=None)
plt.title("Educação da Mãe x Nota Acadêmica")
plt.show()

contagem_renda = df["Parent Revenue"].value_counts().reset_index()
contagem_renda.columns = ["Renda Familiar", "Número de Alunos"]
print("Distribuição de Renda Familiar:")
print(contagem_renda)

estatisticas_notas = df["Grade"].describe().reset_index()
estatisticas_notas.columns = ["Estatística", "Valor"]
print("\nEstatísticas das Notas dos Alunos:")
print(estatisticas_notas)

# Adicionando quartis manualmente (já que describe() não os mostra em linhas separadas)
quartis = df["Grade"].quantile([0.25, 0.5, 0.75]).reset_index()
quartis.columns = ["Quartil", "Valor"]
print("\nQuartis das Notas dos Alunos:")
print(quartis)

media_notas_jogo = df.groupby(["Playing Hours", "Sex"])["Grade"].mean().reset_index()
media_notas_jogo.columns = ["Horas de Jogo", "Sexo", "Média das Notas"]
print("\nTempo de Jogo x Notas dos Alunos:")
print(media_notas_jogo)

media_notas_agrupadas = df.groupby(["Playing Hours", "Sex"])["Grade Group"].value_counts().unstack().reset_index().fillna(0)
print("\nTempo de Jogo x Notas dos Alunos (Agrupadas):")
print(media_notas_agrupadas)

estatisticas_notas_renda = df.groupby("Parent Revenue")["Grade"].describe()
print("\nRenda dos Pais x Notas Acadêmicas:")
print(estatisticas_notas_renda)

media_notas_pai = df.groupby("Father Education")["Grade"].mean().reset_index()
media_notas_pai.columns = ["Educação do Pai", "Média das Notas"]
print("\nEducação do Pai x Nota Acadêmica:")
print(media_notas_pai)

media_notas_mae = df.groupby("Mother Education")["Grade"].mean().reset_index()
media_notas_mae.columns = ["Educação da Mãe", "Média das Notas"]
print("\nEducação da Mãe x Nota Acadêmica:")
print(media_notas_mae)

intervalos = np.linspace(df["Playing Hours"].min(), df["Playing Hours"].max(), 7)  # 6 intervalos
contagem_alunos, limites_intervalos = np.histogram(df["Playing Hours"], bins=intervalos)

tabela_distribuicao_jogo = pd.DataFrame({
    "Intervalo de Horas": [f"{limites_intervalos[i]:.2f} - {limites_intervalos[i+1]:.2f}" for i in range(6)],
    "Número de Alunos": contagem_alunos
})

print("\nDistribuição do Tempo de Jogo:")
print(tabela_distribuicao_jogo)

import numpy as np

intervalos = np.linspace(df["Playing Hours"].min(), df["Playing Hours"].max(), 7)  # 6 intervalos
contagem_alunos, limites_intervalos = np.histogram(df["Playing Hours"], bins=intervalos)

tabela_distribuicao_jogo = pd.DataFrame({
    "Intervalo de Horas": [f"{limites_intervalos[i]:.2f} - {limites_intervalos[i+1]:.2f}" for i in range(6)],
    "Número de Alunos": contagem_alunos
})

print("\nDistribuição do Tempo de Jogo:")
print(tabela_distribuicao_jogo)

